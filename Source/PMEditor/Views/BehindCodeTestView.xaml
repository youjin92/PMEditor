<UserControl x:Class="PMEditor.Views.BehindCodeTestView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:prism="http://prismlibrary.com/"             
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
            xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
            KeyDown="UserControl_KeyDown"
             PreviewKeyDown="UserControl_KeyDown"
             PreviewMouseDoubleClick="UserControl_PreviewMouseDoubleClick"
            xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes" 
             xmlns:viewmodels="clr-namespace:PMEditor.ViewModels"
             prism:ViewModelLocator.AutoWireViewModel="True">

    <Grid Background="Navy" KeyDown="UserControl_KeyDown"   PreviewKeyDown="UserControl_KeyDown">
        <StackPanel Orientation="Vertical">
            <Button Command="{Binding TestCommand}" CommandParameter="PreviewPath" Content="{Binding RelativeSource={RelativeSource self},Path=CommandParameter}"/>
            <Button Command="{Binding TestCommand}" CommandParameter="CombinePath" Content="{Binding RelativeSource={RelativeSource self},Path=CommandParameter}"/>
            <Button Command="{Binding TestCommand}" CommandParameter="CombinePath" Content="{Binding RelativeSource={RelativeSource self},Path=CommandParameter}"/>

            <Button Command="{Binding TestCommand}" CommandParameter="ReadAllBytes" Content="{Binding RelativeSource={RelativeSource self}, Path=CommandParameter}"/>
            <Button Command="{Binding TestCommand}" CommandParameter="WriteAllBytes" Content="{Binding RelativeSource={RelativeSource self}, Path=CommandParameter}"/>
            <Button Command="{Binding TestCommand}" CommandParameter="PingTest" Content="{Binding RelativeSource={RelativeSource self}, Path=CommandParameter}"/>
            <Button Command="{Binding TestCommand}" CommandParameter="INI만들기" Content="{Binding RelativeSource={RelativeSource self}, Path=CommandParameter}"/>
            <Button Command="{Binding TestCommand}" CommandParameter="INI쓰기" Content="{Binding RelativeSource={RelativeSource self}, Path=CommandParameter}"/>
            <Button Command="{Binding TestCommand}" CommandParameter="INI읽기" Content="{Binding RelativeSource={RelativeSource self}, Path=CommandParameter}"/>
            <Button Command="{Binding TestCommand}" CommandParameter="JsonConvert" Content="{Binding RelativeSource={RelativeSource self}, Path=CommandParameter}"/>
            <Button Command="{Binding TestCommand}" CommandParameter="FileImage추출" Content="{Binding RelativeSource={RelativeSource self}, Path=CommandParameter}"/>
            <Button Command="{Binding TestCommand}" CommandParameter="FileImage설정" Content="{Binding RelativeSource={RelativeSource self}, Path=CommandParameter}"/>
            <Image Source="{Binding ImageSource}" Stretch="Fill"/>

            <TreeView ItemsSource="{Binding TreeViewList}" MinWidth="220" TreeViewItem.Expanded="TreeView_Expanded">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="TreeViewItem.Expanded">
                        <i:InvokeCommandAction Command="{Binding ExpandedCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <TreeView.Resources>
                    <Style TargetType="TreeViewItem" BasedOn="{StaticResource MaterialDesignTreeViewItem}">
                    </Style>
                    <HierarchicalDataTemplate DataType="{x:Type viewmodels:Persons}" ItemsSource="{Binding Children}">
                        <TextBlock Text="{Binding Name}" Margin="3,2" ToolTip="Toolip"/>
                    </HierarchicalDataTemplate>
                    <!--<DataTemplate DataType="{x:Type viewmodels:Persons}">
                        <TextBlock Text="{Binding Name}" Margin="32" ToolTip="Toolip" />
                    </DataTemplate>-->
                </TreeView.Resources>
            </TreeView>
            <TextBox>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="KeyDown">
                        <prism:InvokeCommandAction Command="{Binding KeyDownCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TextBox>
        </StackPanel>
    </Grid>
</UserControl>
